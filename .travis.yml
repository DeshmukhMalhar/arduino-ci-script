# This file is used to test the script with Travis CI

language: bash
sudo: required


env:
  global:
    # The Arduino IDE will be installed at APPLICATION_FOLDER/arduino
    - APPLICATION_FOLDER="/usr/local/share"
    - SKETCHBOOK_FOLDER="${HOME}/Arduino"
  matrix:
    # Test install_ide with no argument (using full version list). This would cause the Travis CI build to take much longer so I have it disabled
    # - INSTALL_IDE_START_VERSION=""
    # Test install_ide using full version list
    - INSTALL_IDE_START_VERSION="all"
    # Test install_ide using custom version list
    - INSTALL_IDE_START_VERSION='("1.8.0" "1.8.1" "1.8.2")'
    # Test install_ide using single version (disabled because having only one IDE version installed will prevent testing of build_sketch with a version range or list)
    # - INSTALL_IDE_START_VERSION="1.8.1"
    # Test install_ide using custom version range
    - INSTALL_IDE_START_VERSION="1.8.0" INSTALL_IDE_END_VERSION="hourly"
    # Test install_ide using "oldest" special version name (must install up to 1.6.4 for the installation of Arduino SAM Boards to work)
    - INSTALL_IDE_START_VERSION="oldest" INSTALL_IDE_END_VERSION="1.8.2"
    # Test install_ide using "newest" special version name
    - INSTALL_IDE_START_VERSION="1.8.0" INSTALL_IDE_END_VERSION="newest"


before_install:
  # https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
  # Uncomment the following lines to get verbose script output for debugging
  # Print shell input lines as they are read.
  #- set -v
  # Print a trace of simple commands.
  #- set -x

  - source "${TRAVIS_BUILD_DIR}/arduino-ci-script.sh"

  # set_parameters arguments: folder to install the Arduino IDE to, Sketchbook folder, Enable verbose output during compilation
  - set_parameters "$APPLICATION_FOLDER" "$SKETCHBOOK_FOLDER" "false"


install:
  - install_ide "$INSTALL_IDE_START_VERSION" "$INSTALL_IDE_END_VERSION"

  # Install hardware packages
  # Test package install from this repository (can't do this because the repository isn't a hardware package)
  # - install_package
  # Test Boards Manager package install without URL
  - install_package "arduino:sam"
  # Test Boards Manager package install with URL
  - install_package "MiniCore:avr" "https://mcudude.github.io/MiniCore/package_MCUdude_MiniCore_index.json"
  # Test manual package install from compressed file download
  - install_package "https://github.com/SpenceKonde/ATTinyCore/archive/master.zip"
  # Test manual package install from Git repository clone
  - install_package "https://github.com/MCUdude/MightyCore.git"

  # Test library installation from repository (can't do this because there is no library in this repository)
  # - install_library
  # Test library install from .zip file. A non-GitHub library download must be used because GitHub appends -{branch name} or -{release version} to the .zip downloads and having a library folder installed whos name contains "-" causes arduino 1.5.6 or older to hang.
  - install_library "https://bitbucket.org/teckel12/arduino-new-ping/downloads/NewPing_v1.8.zip"
  # Test library install from .zip file with rename. If the rename doesn't work then any job verifying with Arduino IDE 1.5.6 or older will hang because GitHub changes the folder name to WatchdogLog-master, which is not a valid folder name on those IDE versions.
  - install_library "https://github.com/per1234/WatchdogLog/archive/master.zip" "WatchdogLog"
  # Test library install from git repo
  - install_library "https://github.com/per1234/EEPROMallocation.git"
  # Test library install from git repo with rename
  - install_library "https://github.com/per1234/MouseTo.git" "MouseToRename"
  # Test library install from Library Manager
  - install_library "Adafruit NeoPixel"


script:
  # Verify sketches:
  # build_sketch arguments: sketch name, fqbn, IDE version, allow failure
  # IDE version: Use "all" for IDE version argument to verify sketch with all versions of the Arduino IDE, use "newest" for IDE version argument to verify sketch with the newest version of the Arduino IDE

  # Installed package tests:
  # Test sketch verification using board from hardware package installed via Boards Manager without URL
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:sam:arduino_due_x_dbg" "false" "newest"
  # Test sketch verification using board from hardware package installed with Boards Manager URL
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "MiniCore:avr:328:variant=modelP,BOD=2v7,LTO=Os,clock=16MHz_external" "false" "newest"
  # Test sketch verification using board from hardware package manually installed from compressed file download
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" "ATTinyCore-master:avr:attinyx5:LTO=disable,TimerClockSource=default,chip=85,clock=8internal,bod=disable" "false" "newest"
  # Test sketch verification using board from hardware package manually installed by cloning Git repository
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/BareMinimum/BareMinimum.ino" "MightyCore:avr:1284:pinout=standard,variant=modelP,BOD=2v7,LTO=Os,clock=16MHz_external" "false" "newest"

  # Installed library tests:
  # Test sketch verification using library installed from .zip
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/NewPing/examples/NewPingExample/NewPingExample.pde" "arduino:avr:mega:cpu=atmega2560" "false" "newest"
  # Test sketch verification using library installed from .zip with rename
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/WatchdogLog/examples/WatchdogLogExample/WatchdogLogExample.ino" "arduino:avr:mega:cpu=atmega2560" "false" "newest"
  # Test sketch verification using library installed from .git
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EEPROMallocation/examples/EEPROMallocationExample/EEPROMallocationExample.ino" "arduino:avr:mega:cpu=atmega2560" "false" "newest"
  # Test sketch verification using library installed from .git with rename
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/MouseToRename/examples/BasicUsage/BasicUsage.ino" "arduino:avr:leonardo" "false" "newest"
  # Test sketch verification using library installed from Library Manager
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/Adafruit_NeoPixel/examples/simple/simple.ino" "arduino:avr:mega:cpu=atmega2560" "false" "newest"

  # build_sketch with sketch argument tests:
  # Test sketch verification with specific IDE version
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:mega:cpu=atmega2560" "false" "1.8.1"
  # Test sketch verification with "oldest" IDE versions (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:uno" "false" "oldest"
  # Test sketch verification with "newest" IDE versions
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:mega:cpu=atmega2560" "false" "newest"
  # Test sketch verification with all IDE versions (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:uno" "false" "all"
  # Test sketch verification with no IDE versions specified (should use all installed IDE versions) (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:uno" "false"
  # Test sketch verification with an IDE version list (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:uno" "false" '("1.8.0" "1.8.1" "1.8.2")'
  # Test sketch verification with an IDE version range (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics/Blink/Blink.ino" "arduino:avr:uno" "false" "1.8.0" "1.8.2"

  # Test sketch verification allowed to fail (this will fail because WatchdogLog is AVR specific)
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/WatchdogLog/examples/WatchdogLogExample/WatchdogLogExample.ino" "arduino:sam:arduino_due_x_dbg" "true" "newest"

  # build_sketch with folder argument tests:
  # Test build_sketch with specific IDE version
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:mega:cpu=atmega2560" "false" "1.8.1"
  # Test build_sketch with "oldest" IDE version (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:uno" "false" "oldest"
  # Test build_sketch with "newest" IDE version
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:mega:cpu=atmega2560" "false" "newest"
  # Test build_sketch with all IDE versions (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:uno" "false" "all"
  # Test build_sketch with no IDE versions specified (should use all installed IDE versions) (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:uno" "false"
  # Test build_sketch with an IDE version list (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:uno" "false" '("1.8.0" "1.8.1" "1.8.2")'
  # Test build_sketch with an IDE version range (must use Uno because fqbn for Mega 2560 is different with old IDE versions)
  - build_sketch "${APPLICATION_FOLDER}/arduino/examples/01.Basics" "arduino:avr:uno" "false" "oldest" "newest"

  # Test build_sketch allowed to fail (this will fail because WatchdogLog is AVR specific)
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/WatchdogLog/examples" "arduino:sam:arduino_due_x_dbg" "true" "newest"

  - display_report
  - check_success


notifications:
  email:
    on_success: always
    on_failure: always
